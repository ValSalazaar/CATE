## Arquitectura técnica (MVP CATE)

**Flujo general:**
1. **Frontend (React + Next.js)**  
   - UI web y móvil (PWA)  
   - Conexión a APIs vía HTTPS  
   - Integración con Web3Modal para conexión de wallet  
   - Internacionalización (i18n) para varios idiomas  

2. **Backend (Node.js + Express)**  
   - API REST para operaciones CRUD  
   - WebSocket para notificaciones en tiempo real (pagos, validaciones)  
   - Integración con servicios externos (KYC, universidades, blockchain)  
   - Autenticación JWT + OAuth2  

3. **Base de datos**  
   - **PostgreSQL**: usuarios, credenciales, transacciones, planes de suscripción  
   - **MongoDB**: perfiles dinámicos, logs, historial de validaciones  

4. **Blockchain Layer**  
   - **Polygon ID** para emisión/verificación de credenciales (VC)  
   - **Smart Contracts en Solidity** para acuerdos laborales y pagos condicionados  
   - **Stablecoins (USDC/cUSD)** para pagos y remesas  

5. **Integraciones externas**  
   - **KYC**: Onfido / Sumsub  
   - **Pagos**: Bitso / Transak (on/off ramp)  
   - **Certificaciones**: APIs de universidades, plataformas de cursos  
   - **Email/SMS**: SendGrid / Twilio  

6. **Infraestructura**  
   - AWS (EC2, RDS, S3, Cognito, CloudFront)  
   - Vercel para despliegue del frontend  
   - GitHub Actions para CI/CD  

---

## Backlog inicial (MVP)

**Sprint 1 – Fundamentos**
- [ ] Configurar repositorios (frontend, backend, smart contracts)  
- [ ] Configurar CI/CD con GitHub Actions  
- [ ] Configurar entornos en AWS y Vercel  
- [ ] Definir esquema de base de datos en PostgreSQL y MongoDB  

**Sprint 2 – Autenticación y roles**
- [ ] Implementar registro/login con email y teléfono  
- [ ] Integrar verificación KYC  
- [ ] Crear sistema de roles (talento, empresa, ONG, admin)  

**Sprint 3 – Gestión de credenciales**
- [ ] Módulo de carga de documentos  
- [ ] Validación manual y automática vía API  
- [ ] Emisión de Verifiable Credentials en Polygon ID  

**Sprint 4 – Wallet y pagos**
- [ ] Integrar Web3Modal y conexión de wallet  
- [ ] Recepción de pagos en stablecoins  
- [ ] Conversión a fiat vía Bitso/Transak  

**Sprint 5 – Matching básico**
- [ ] Algoritmo inicial de matching por competencias  
- [ ] Panel para empresas con filtros  
- [ ] Listado de vacantes para talento  

**Sprint 6 – Panel de administración**
- [ ] Gestión de usuarios y credenciales  
- [ ] Reportes básicos de actividad  
- [ ] Control de planes y facturación  

**Sprint 7 – QA y lanzamiento beta**
- [ ] Pruebas unitarias y de integración  
- [ ] Auditoría de seguridad  
- [ ] Beta cerrada con usuarios reales  

---
Estructura de repositorios
Monorepo (recomendado con pnpm o yarn workspaces)
Código
/cate-app
  /apps
    /frontend        # React Native app
    /backend         # Node.js/Express API
  /packages
    /ui              # Componentes UI compartidos
    /utils           # Funciones utilitarias (formateo, validaciones, etc.)
    /types           # Tipos TypeScript compartidos
    /config          # Configuración común (env, constantes)
  /docs              # Documentación técnica y de producto
Frontend (/apps/frontend)
Código
/src
  /assets           # Iconos, imágenes, fuentes
  /components       # Componentes reutilizables (Botones, Inputs, Cards)
  /screens          # Pantallas (Onboarding, Dashboard, Wallet, Talent, Skills)
  /navigation       # Stack y Tab navigators
  /hooks            # Hooks personalizados (useAuth, useFXRates)
  /services         # Llamadas a API (authService, walletService)
  /context          # Contextos globales (AuthContext, ThemeContext)
  /theme            # Colores, tipografía, estilos globales
  /utils            # Funciones de ayuda específicas del frontend
  App.tsx
⚙ Backend (/apps/backend)
Código
/src
  /api
    /routes         # Definición de rutas (auth, credentials, wallet, ai)
    /controllers    # Lógica de endpoints
    /middlewares    # Autenticación, validación, logging
  /services         # Integraciones externas (KYC, pagos, FX, blockchain)
  /models           # Modelos de base de datos (User, Credential, Wallet)
  /db               # Configuración y migraciones de PostgreSQL
  /config           # Variables de entorno, claves API
  /utils            # Funciones auxiliares (hashing, cifrado)
  server.ts
Packages compartidos
/ui → Botones, inputs, modales, loaders con estilo premium tipo Revolut.

/utils → Validaciones, formateo de fechas/números, manejo de errores.

/types → Interfaces y tipos para sincronizar frontend y backend.

/config → Constantes globales (colores, breakpoints, endpoints).

Buenas prácticas desde el día 1
Convención de commits: usar Conventional Commits (feat:, fix:, chore:).

Lint + Prettier: formateo y estilo consistente.

Testing: Jest para backend y React Testing Library para frontend.

CI/CD: pipeline mínimo para correr tests y lint antes de mergear.

.env por entorno: .env.development, .env.staging, .env.production.
